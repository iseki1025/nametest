let worker; // Tesseract.jsのワーカー

async function initializeTesseract() {
    if (worker) return; // 既に初期化済みなら何もしない

    ocrStatus.textContent = 'OCRワーカーを初期化中...';
    try {
        worker = Tesseract.createWorker({
            // langPath: './lib/lang-data/', // 言語データのパスを指定 (CDN利用の場合は不要)
            logger: m => {
                // OCRの進捗を表示 (m.status, m.progress)
                if (m.status === 'recognizing text') {
                    ocrStatus.textContent = `OCR処理中: ${Math.round(m.progress * 100)}%`;
                } else {
                    ocrStatus.textContent = `OCRステータス: ${m.status}`;
                }
            }
        });

        await worker.load();
        // 日本語と英語をロード
        await worker.loadLanguage('jpn');
        await worker.loadLanguage('eng');
        await worker.initialize('jpn+eng'); // 複数の言語を認識する設定
        ocrStatus.textContent = 'OCRワーカー初期化完了。';
    } catch (error) {
        console.error('Tesseract.jsの初期化に失敗しました:', error);
        ocrStatus.textContent = 'OCRワーカーの初期化に失敗しました。';
        alert('OCRエンジンの読み込みに失敗しました。インターネット接続を確認するか、ブラウザを再起動してください。');
    }
}

async function performOcr(image) {
    if (!worker) {
        await initializeTesseract();
    }
    if (!worker) { // 初期化に失敗したら実行しない
        return { text: '' };
    }

    ocrStatus.textContent = 'OCR処理を開始...';
    try {
        const { data: { text } } = await worker.recognize(image);
        ocrStatus.textContent = 'OCR処理が完了しました！';
        return { text };
    } catch (error) {
        console.error('OCR処理中にエラーが発生しました:', error);
        ocrStatus.textContent = 'OCR処理中にエラーが発生しました。';
        return { text: '' };
    }
}

// OCR結果から名刺の各項目を推測する簡易ロジック
// 実際の製品では、正規表現やより複雑なAIモデルが必要
function parseOcrResult(fullText) {
    const lines = fullText.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    let name = '';
    let company = '';
    let title = '';
    let phone = '';
    let email = '';
    let address = '';

    // 簡易的なキーワードマッチング
    lines.forEach(line => {
        if (!name && line.length > 2 && !/[0-9]/.test(line) && !line.includes('@')) {
            // 数字や@を含まず、ある程度の長さの行を名前に推測 (非常に単純)
            // ここで、苗字と名前を判断したりするロジックが必要
            name = line;
        }
        if (line.includes('株式会社') || line.includes('有限会社') || line.includes('Co.,Ltd.') || line.includes('Corp.')) {
            company = line;
        }
        if (line.includes('Tel:') || line.includes('TEL:') || line.includes('電話:') || /\d{2,4}-\d{2,4}-\d{4}/.test(line) || /\+\d{1,3}\s?\(\d{1,4}\)\s?\d{4,}-\d{4,}/.test(line)) {
            phone = line.replace(/Tel:|TEL:|電話:|\s/g, ''); // Tel:などを削除
        }
        if (line.includes('@') && line.includes('.')) {
            email = line;
        }
        if (/[〒T]\d{3}-?\d{4}/.test(line) || line.includes('都') || line.includes('道') || line.includes('府') || line.includes('県')) {
            address = line;
        }
        if (line.includes('代表取締役') || line.includes('部長') || line.includes('課長') || line.includes('Manager') || line.includes('CEO') || line.includes('Director')) {
            title = line;
        }
    });

    return { name, company, title, phone, email, address };
}